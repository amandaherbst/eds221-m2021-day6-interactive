---
title: "Day 6 Interactive"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(here)
library(janitor)
```

## Warm Up

Recreate text of the first 3 pages in the book "Brown bear, brown bear, what do you see?"

```{r}
animal <- c("brown bear", "red bird", "yellow duck", "blue horse")

for (i in 2:length(animal)) {
  print(paste0(animal[i-1], ", ", animal[i-1], ", what do you see? I see a ", animal[i], " looking at me."))
}
```

## Tidy Data

Read in data

```{r}
wb_indicators <- read_csv(here("data", "wb_indicators.csv"), na = c("..", ""))
```

combine years into one column

```{r}
wb_indicators_long <- wb_indicators %>% 
  pivot_longer(cols = '2001 [YR2001]':'2020 [YR2020]',
               names_to  = 'year',
               values_to = 'indicator_value')
```

separate years so we are just left with the number year, and get rid of columns we don't need

```{r}
wb_indicators_clean <- wb_indicators_long %>% 
  tidyr::separate(col = "year",
           into = c("year", "year_chr"),
           sep = " ") %>% 
  dplyr::select(-year_chr, -`Country Code`, -`Series Code`) 
# "-" means "except for", so we kept all of the columns EXCEPT for year_chr, Country Code, and Series Code
```

```{r}
wb_indicators_tidy <- wb_indicators_clean %>% 
  tidyr::drop_na('Series Name') %>% # drops the ENTIRE ROW where there is an NA for series name
  pivot_wider(names_from = `Series Name`,
              values_from = indicator_value) %>% 
  dplyr::rename(country = "Country Name",
                access_fuels_pp = "Access to clean fuels and technologies for cooking (% of population)",
                access_electricity_pp = "Access to electricity (% of population)",
                co2_emissions_kt = "CO2 emissions (kt)",
                fossil_fuel_cons_pt = "Fossil fuel energy consumption (% of total)",
                water_stress = "Level of water stress: freshwater withdrawal as a proportion of available freshwater resources") %>% 
  dplyr::mutate(year = as.numeric(year))

## use names() to find column names in the console, then copy/paste to avoid typing errors
```

```{r}
## this is a risky way to do it because it depends entirely on the position of each column, and if a column is moved around, this breaks

# names(wb_indicators_tidy) <- c("country", 
#                                "year", 
#                                "access_clean_fuels_pp",
#                                "access_electricity_pp",
#                                "co2_emissions_kt",
#                                "fossil_fuel_cons_pt",
#                                "water_stress")
```

Make a chart!

```{r}
ggplot(data = wb_indicators_tidy, aes(x = year, y = co2_emissions_kt)) +
  geom_line(aes(color = country), show.legend = FALSE)

```
